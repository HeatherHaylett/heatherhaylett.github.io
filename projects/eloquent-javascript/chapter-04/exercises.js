////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/*
* Write a range function that takes two arguments, start and end, 
* and returns an array containing all the numbers from start up to (and including) end.
*/
// give start and end parameters
//use a third parameter that changes depending on if start is less than end
// use a for loop that starts at start, end at end, increment by 1
// create empty array then push numbers in
function range(start, end, step = start < end ? 1 : -1) {
  let array = [];
  //return empty array if one value in range
  if(start === end){
    return array;
  }
  if (step > 0) {
    for (let i = start; i <= end; i += step) array.push(i);
  } else {
    for (let i = start; i >= end; i += step) array.push(i);
  }
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/*
* write a sum function that takes an array of numbers 
* and returns the sum of these numbers. Run the example program and see whether it does indeed return 55.
*/
//takes an arr, returns sum
//use reduce 
function sum(arr) {
return arr.reduce(function(a,b){
  return a + b;
}, 0)
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  reverseArray, takes an array as argument and produces 
// a new array that has the same elements in the inverse order.

//loop through array then use unshift to push to new array
function reverseArray(arr) {
let newArr = [];
for(var i = 0; i < arr.length; i++){
newArr.unshift(arr[i]);
}
return newArr;
}
////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/*
*reverseArrayInPlace, does what the reverse method does: 
it modifies the array given as argument by reversing its elements. Neither may use the standard reverse method.
*/

function reverseArrayInPlace(array) {
  for (let i = 0; i < Math.floor(array.length / 2); i++) {
    let old = array[i];
    array[i] = array[array.length - 1 - i];
    array[array.length - 1 - i] = old;
  }
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//takes an array as a parameter
// build a nested set of objects, return list
// set list to null
// loop through array 
function arrayToList(arr) {
  let list = null;
  for (let i = arr.length - 1; i >= 0; i--) {
    list = {value: arr[i], rest: list};
  }
  return list;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray() {

}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend() {

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth() {

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual() {

}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
